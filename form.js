// Generated by CoffeeScript 1.9.1
angular.module('angular.mongoose.form', []).run([
  '$templateCache', function($templateCache) {
    return $templateCache.put('template/form.add.html', '<div class="modal-header">\n    <h4 class="modal-title">{{title}}</h4>\n</div>\n<div class="modal-body">\n    <form class="form-horizontal" role="form" ng-submit="submit()">\n        <div class="form-group" ng-repeat="row in rows" ng-if="row.if && !row.isHide">\n            <label class="col-sm-3 control-label">{{row.name}}</label>\n            <div class="col-sm-9" ng-if="row.style==\'input\'">\n                <input type="text" class="form-control"  placeholder="{{row.placeholder}}" name="{{row.field}}" ng-model="data[row.field]" >\n                {{row.help}}\n            </div>\n            <div class="col-sm-9" ng-if="row.style==\'password\'">\n                <input type="password" class="form-control"  placeholder="{{row.placeholder}}" name="{{row.field}}" ng-model="data[row.field]" >\n                {{row.help}}\n            </div>\n            <div class="col-sm-9" ng-if="row.style == \'radio\'">\n                <div class="btn-group">\n                    <label ng-repeat="value in row.enum" class="btn btn-primary" ng-model="data[row.field]" btn-radio="\'{{value}}\'">{{row.names[$index]}}</label>\n                </div>\n                {{row.help}}\n            </div>\n            <div class="col-sm-9" ng-if="row.style == \'date\'">\n                <div class="input-group">\n                    <input type="text" class="form-control" datepicker-popup="yyyy-MM-dd" ng-model="data[row.field]" is-open="row.isOpend" name="{{row.field}}" />\n                    <span class="input-group-btn">\n                        <button type="button" class="btn btn-default" ng-click="openDate($event,row)" ><i class="glyphicon glyphicon-calendar"></i></button>\n                    </span>\n                </div>\n                {{row.help}}\n            </div>\n        </div>\n    </form>\n</div>\n<div class="modal-footer">\n    <button class="btn btn-danger" ng-click="ok()">确认{{title}}</button>\n    <button class="btn btn-warning" ng-click="cancel()">取消</button>\n</div>');
  }
]).service('$form', [
  '$modal', function($modal) {

    /*
    提供4个参数，标题，模型，默认数据，验证函数
    模型在mongoose.Schema的基础上扩展了几个字段。
    
    验证函数支持两种形式：
    1. vali(data)
    返回String/null
    当返回String时代表验证未通过，表单继续显示
    当返回null时，验证通过，promise resolve
    
    2. vali(data,cb)
    异步验证方式
    回调函数cb支持一个err参数，当err为String时代表验证未通过，表单继续显示
    当err为null时，验证通过，promise resolve
     */
    return function(title, schema, data, vali) {
      var modalInstance;
      modalInstance = $modal.open({
        templateUrl: 'template/form.add.html',
        controller: 'form.add.control',
        resolve: {
          title: function() {
            return title;
          },
          schema: function() {
            return schema;
          },
          data: function() {
            return data;
          },
          vali: function() {
            return vali;
          }
        }
      });
      return modalInstance.result;
    };
  }
]).controller('form.add.control', function($scope, $modalInstance, $filter, $msgbox, title, schema, data, vali) {
  var addWatch, defaultData, formatData, formatSchema;
  $scope.title = title;
  $scope.vali = vali;
  $scope.rows = [];
  $scope.data = {};
  defaultData = angular.extend({}, data);
  addWatch = function(field, result, o) {
    return $scope.$watch('data', function(value) {
      if (value[field] === result) {
        return o["if"] = true;
      } else {
        return o["if"] = false;
      }
    }, true);
  };
  formatSchema = function(rows, data, schema, defaultData) {
    var field, o, v;
    if (defaultData == null) {
      defaultData = {};
    }
    for (field in schema) {
      v = schema[field];
      if (!v.name || !v.type) {
        return formatSchema(rows, data, v, defaultData[field]);
      }
      o = {
        name: v.name,
        placeholder: v.placeholder,
        field: field,
        help: v.help,
        style: v.style || 'input',
        "enum": v["enum"],
        names: v.names || v["enum"],
        "if": true,
        isHide: v.isHide
      };
      if (v.ifField) {
        o["if"] = false;
        addWatch(v.ifField, v.ifResult, o);
      }
      if (defaultData && defaultData[field]) {
        data[field] = defaultData[field];
      } else {
        data[field] = '';
        if (v["default"]) {
          data[field] = v["default"];
        }
      }
      rows.push(o);
    }
  };
  formatSchema($scope.rows, $scope.data, schema, defaultData);
  formatData = function(schema, data) {
    var field, result, v;
    result = {};
    for (field in schema) {
      v = schema[field];
      if (!v.name || !v.type) {
        result[field] = formatData(v, data);
        continue;
      }
      if (v.type === Number && v.style === 'date') {
        result[field] = new Date($filter('date')(data[field], 'yyyy-MM-dd')).getTime();
      } else {
        result[field] = data[field];
      }
      if (v.type === Boolean) {
        result[field] = data[field] === 'true' ? true : false;
      }
    }
    return result;
  };
  $scope.ok = function() {
    var isSuccess;
    data = formatData(schema, $scope.data);
    if (!$scope.vali) {
      return $modalInstance.close(data);
    }
    if ($scope.vali.length === 2) {
      $scope.vali(data, function(err) {
        if (err) {
          return $msgbox(err);
        }
        $modalInstance.close(data);
      });
    }
    isSuccess = $scope.vali(data);
    if (isSuccess) {
      return $msgbox(isSuccess);
    }
    return $modalInstance.close(data);
  };
  $scope.cancel = function() {
    return $modalInstance.dismiss('cancel');
  };
  return $scope.openDate = function($event, o) {
    $event.preventDefault();
    $event.stopPropagation();
    return o.isOpend = true;
  };
});
